{"version":3,"file":"static/js/401.f8d81892.chunk.js","mappings":"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","sources":["helper/helper.ts","Pages/mainPage/Components/modal/deleteModal/modalStyledWindow.ts","Pages/mainPage/Components/modal/deleteModal/deleteModalWindow.tsx","Pages/mainPage/Components/modal/editModal/editModalStyled.ts","Pages/mainPage/Components/modal/editModal/editModal.tsx","Pages/mainPage/Components/taskForm/taskFormStyled.ts","Pages/mainPage/Components/taskForm/taskForm.tsx","Pages/mainPage/Components/modal/addSubTaskModal/addSubtaskModal.tsx","Pages/mainPage/Components/modal/modalWindowsStyled.ts","Pages/mainPage/Components/modal/modalWindow.tsx","Pages/mainPage/Components/taskItem/taskItemStyled.ts","Pages/mainPage/Components/taskItem/taskItem.tsx","Pages/mainPage/Components/taskList/taskListStyled.ts","redux/tasks/selectors.ts","Pages/mainPage/Components/taskList/taskList.tsx","Pages/mainPage/Components/swipeableEdgeDrawer/SwipeableEdgeDrawer.tsx","Pages/mainPage/TaskPageStyled.ts","Pages/mainPage/TaskPage.tsx"],"sourcesContent":["import type { ITask } from \"./Task.types\";\n\n//  parentId grouping func\nexport const groupTasksByParentId = (tasks:ITask[]):Record<string, ITask[]> => {\n  const taskMap:Record<string, ITask[]> = {};\n  tasks.forEach(task => {\n    if (!taskMap[task.parentId]) {\n      taskMap[task.parentId] = [];\n    }\n    taskMap[task.parentId].push(task);\n  });\n  return taskMap;\n};\n\n//  time formatting func\n\nexport function formatToString(date:string):string {\n  const actualDate = new Date(date);\n\n  actualDate.setMilliseconds(0);\n\n  const year = actualDate.getFullYear();\n  const month = String(actualDate.getMonth() + 1).padStart(2, '0');\n  const day = String(actualDate.getDate()).padStart(2, '0');\n  const hour = String(actualDate.getHours()).padStart(2, '0');\n  const minute = String(actualDate.getMinutes()).padStart(2, '0');\n  const second = String(actualDate.getSeconds()).padStart(2, '0');\n\n  const pickedDate = `${day}-${month}-${year}   ${hour}:${minute}:${second}`;\n  return pickedDate;\n}\n\n//  random color for level stylization func\n\n// export function getRandomHexColor() {\n//   return `#${Math.floor(Math.random() * 16777215)\n//     .toString(16)\n//     .padStart(6, 0)}`;\n// }\nexport function getRandomHexColor():string {\n  \n  const getRandomChannelValue = () => Math.floor(Math.random() * 128) + 128;\n\n  // Генерация значений для каждого канала цвета\n  const r = getRandomChannelValue();\n  const g = getRandomChannelValue();\n  const b = getRandomChannelValue();\n\n  // Преобразование в формат HEX\n  const rgbToHex = (r:number, g:number, b:number):string => `#${[r, g, b]\n    .map(value => value.toString(16).padStart(2, '0'))\n    .join('')}`;\n\n  return rgbToHex(r, g, b);\n}\n\n//  unic colors for subtask level assignment func\n\nconst colorMap: Record<number, string> = {};\n\nexport const getColorForLevel = (level:number):string => {\n  if (!colorMap[level]) {\n    colorMap[level] = getRandomHexColor();\n  }\n \n  return colorMap[level];\n};\n\n\n//  root perent element searching func\n\nexport const rootEl =( tasks:ITask[]):string|null => {\n  const idArr:string[] = [];\n  tasks.forEach((task:ITask) => {\n    idArr.push(task.parentId);\n  });\n  idArr.sort((a, b) => a.localeCompare(b));\n\n  return idArr[0] !== undefined ? idArr[0] : null;\n};\n","import styled from 'styled-components';\n\nexport const ModalOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5); \n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const ModalContent = styled.div`\n  background-color: #fff;\n  padding: 20px;\n  border-radius: 8px;\n  width: 300px;\n  text-align: center;\n`;\n\nexport const ModalButton = styled.button`\n  margin: 0 10px;\n  padding: 8px 16px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n`;\n","import { useDispatch } from 'react-redux';\n\nimport { deleteTask, fetchTasks } from '../../../../../redux/tasks/operators';\n\nimport { ModalButton } from './modalStyledWindow';\nimport { FC } from 'react';\nimport { IdeleteTaskModal } from '../../../../../helper/Task.types';\nimport { AppDispatch } from '../../../../../redux/store';\n\nexport const DeleteConfirmationModal: FC<IdeleteTaskModal> = ({\n  _id,\n  onClose,\n}) => {\n  const dispatch = useDispatch<AppDispatch>();\n  const handleDelete = async (): Promise<void> => {\n    try {\n      await dispatch(deleteTask(_id)).unwrap();\n\n      dispatch(fetchTasks());\n    } catch (error) {\n      console.error('Error deleting task:', error);\n    }\n\n    onClose();\n  };\n\n  return (\n    <div>\n      <p>Are you sure you want to delete this task?</p>\n      <div>\n        <ModalButton onClick={handleDelete}>Yes</ModalButton>\n        <ModalButton onClick={onClose}>No</ModalButton>\n      </div>\n    </div>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ModalOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5); \n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const ModalContent = styled.div`\n  background-color: #fff;\n  padding: 20px;\n  border-radius: 8px;\n  width: 600px;\n  text-align: center;\n  position: relative;\n`;\n\nexport const TextInput = styled.textarea`\n  background-color: #fff;\n  padding: 10px;\n  border-radius: 8px;\n  width: 400px;\n  margin:  20px 0 ;\n \n`;\n\nexport const ModalButton = styled.button`\n  margin: 0 10px;\n  padding: 8px 16px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n`;\n\n\nexport const CloseButton = styled.button`\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    background-color: transparent;\n    border: none;\n    font-size: 16px;\n    cursor: pointer;\n`;\n\n","import { useDispatch } from 'react-redux';\nimport { updateTask } from '../../../../../redux/tasks/operators';\nimport { ModalButton, TextInput } from './editModalStyled';\nimport { FC, useState } from 'react';\nimport { IeditTaskModal } from '../../../../../helper/Task.types';\nimport { AppDispatch } from '../../../../../redux/store';\n\nexport const EditTaskModal: FC<IeditTaskModal> = ({\n  _id,\n  text: initialText,\n  onClose,\n}) => {\n  const dispatch = useDispatch<AppDispatch>();\n  const [text, setText] = useState(initialText);\n\n  const handleUpdate = () => {\n    dispatch(updateTask({ _id, text }));\n    onClose();\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setText(e.target.value);\n  };\n\n  return (\n    <div>\n      <p>Edit task please</p>\n\n      <form>\n        <TextInput\n          name=\"text\"\n          rows={3}\n          value={text}\n          onChange={handleChange}\n          placeholder=\"Insert edited task here\"\n        />\n      </form>\n      <ModalButton type=\"button\" onClick={handleUpdate}>\n        Edit\n      </ModalButton>\n    </div>\n  );\n};\n","import styled from 'styled-components';\nimport { Form, ErrorMessage, Field } from 'formik';\n\nexport const FormStyled = styled(Form)`\n  width: \"80vw\";\n\n  border: 1px solid ${p => p.theme.colors.borderGray};\n  border-radius: ${p => p.theme.borderRad.norm};\n  box-shadow: 0 0 4px 0 rgba(0, 0, 0, 0.2);\n\n  padding: ${p => p.theme.padding.big};\n  display: flex;\n  flex-direction: column;\n  gap: ${p => p.theme.gap.big};\n`;\n\nexport const FieldGroup = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: ${p => p.theme.gap.small};\n\n  \n`;\n\nexport const ErrorMessageStyled = styled(ErrorMessage)`\n  padding: 0;\n  color: red;\n  font-size: 12px;\n`;\nexport const FieldStyled = styled(Field)`\n  width: \"70vw\";\n \n  border: 1px solid ${p => p.theme.colors.borderGray};\n  border-radius: ${p => p.theme.borderRad.small};\n  box-shadow: 0 0 1px 0 rgba(0, 0, 0, 0.2);\n`;\n\nexport const Button = styled.button`\n  width: 100px;\n  border: 1px solid ${p => p.theme.colors.borderGray};\n  border-radius: ${p => p.theme.borderRad.small};\n  box-shadow: 0 0 1px 0 rgba(0, 0, 0, 0.2);\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import { Formik, FormikHelpers } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  Button,\n  ErrorMessageStyled,\n  FieldGroup,\n  FieldStyled,\n  FormStyled,\n} from './taskFormStyled';\nimport { useDispatch } from 'react-redux';\nimport { addTask } from '../../../../redux/tasks/operators';\nimport { ITask } from '../../../../helper/Task.types';\nimport { FC } from 'react';\nimport { AppDispatch } from '../../../../redux/store';\n// import Notiflix from 'notiflix';\n\ninterface TaskFormProp extends Partial<ITask> {\n  onClose: () => void;\n}\n\nconst taskSchema = Yup.object().shape({\n  text: Yup.string()\n    // .matches(/^[^!]*$/, 'The task cannot contain the \"!\" character.')\n    .required('Required'),\n});\n\nexport const TaskForm: FC<TaskFormProp> = ({ parentId, subLevel, onClose }) => {\n  const dispatchTask = useDispatch<AppDispatch>();\n\n  const onAdd = (\n    values: { text: string; date: string },\n    actions: FormikHelpers<{ text: string; date: string }>\n  ) => {\n    // if (values.text.includes('!')) {\n    //   Notiflix.Notify.failure('The task field cannot contain \"!\" character.');\n    //   return;\n    // }\n    if (!parentId) {\n      parentId = '0';\n      subLevel = 0;\n    } else {\n      subLevel = (subLevel ?? 0) + 1;\n    }\n\n    const newTask = {\n      text: values.text,\n      date: new Date().toISOString(),\n      parentId: parentId,\n      subLevel: subLevel,\n    };\n\n    dispatchTask(addTask(newTask));\n    actions.resetForm();\n    if (onClose) {\n      onClose();\n    }\n  };\n  return (\n    <Formik\n      initialValues={{\n        text: '',\n        date: new Date().toString(),\n      }}\n      validationSchema={taskSchema}\n      onSubmit={onAdd}\n    >\n      <FormStyled>\n        <FieldGroup>\n          <FieldStyled\n            name=\"text\"\n            type=\"text\"\n            placeholder=\"Insert your task here\"\n          />\n          <ErrorMessageStyled name=\"text\" component=\"span\" />\n        </FieldGroup>\n\n        <Button type=\"submit\">Add Task</Button>\n      </FormStyled>\n    </Formik>\n  );\n};\n","\nimport { FC } from 'react';\nimport { IaddSubTaskModal } from '../../../../../helper/Task.types';\nimport { TaskForm } from '../../taskForm/taskForm';\n\n\n\nexport const AddSubTaskModal:FC<IaddSubTaskModal> = ({ _id, onClose, subLevel, }) => {\n \n\n  return (\n    <div>\n      <h2\n        style={{\n          padding: 10,\n        }}\n      >\n        Add SubTask\n      </h2>\n\n      <TaskForm parentId ={ _id} onClose={onClose} subLevel={subLevel} />\n    </div>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ModalOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const ModalContent = styled.div`\n  background-color: #fff;\n  padding: 20px;\n  border-radius: 8px;\n  width: 600px;\n  text-align: center;\n  position: relative;\n`;\n\nexport const CloseButton = styled.button`\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  background-color: transparent;\n  border: none;\n  font-size: 16px;\n  cursor: pointer;\n`;\n","import { CloseButton, ModalContent, ModalOverlay } from './modalWindowsStyled';\nimport { FC, useEffect } from 'react';\nimport { MdClose } from 'react-icons/md';\nimport { IgeneralModal } from '../../../../helper/Task.types';\n\n\nexport const Modal:FC<IgeneralModal> = ({ isOpen, onClose, children }) => {\n  useEffect(() => {\n    const closeModalOnEsc =( e:KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        onClose();\n      }\n    };\n    window.addEventListener('keydown', closeModalOnEsc);\n\n    return () => {\n      window.removeEventListener('keydown', closeModalOnEsc);\n    };\n  }, [onClose]);\n\n  const closeModalOnBackdrop = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <ModalOverlay onClick={closeModalOnBackdrop}>\n      <ModalContent>\n        <CloseButton onClick={onClose}>\n          <MdClose style={{ color: 'red' }} />\n        </CloseButton>\n        {children}\n      </ModalContent>\n    </ModalOverlay>\n  );\n};\n","import styled from 'styled-components';\nexport const TaskRow = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  padding: '10px 0';\n  width: 70vw;\n  margin-bottom: 10px;\n`;\n\nexport const DeleteButton = styled.button`\n  background: none;\n  border: none;\npadding: 0 20px;\n  cursor: pointer;\n  /* display: flex;\n  align-items: center; */\n  text-align: center;\n`;\n\nexport const EditButton = styled.button`\n  background: none;\n  border: none;\n  text-align: center;\n  justify-content: center;\n  padding: 0 10px;\n\n  cursor: pointer;\n  /* display: flex;\n  align-items: center; */\n`;\nexport const AddSubTaskButton = styled.button`\n  background: none;\n  padding: 0 10px;\n  border: none;\n  text-align: center;\n  \n  cursor: pointer;\n\n`;","import React, { useState } from 'react';\n\nimport { VscTrash } from 'react-icons/vsc';\nimport { formatToString} from '../../../../helper/helper';\n\nimport { styled } from '@mui/material/styles';\nimport Paper from '@mui/material/Paper';\nimport Box from '@mui/material/Box';\nimport { DeleteConfirmationModal } from '../modal/deleteModal/deleteModalWindow';\nimport { EditTaskModal } from '../modal/editModal/editModal';\nimport { AddSubTaskModal } from '../modal/addSubTaskModal/addSubtaskModal';\n\nimport { Modal } from '../modal/modalWindow';\nimport { AddSubTaskButton, DeleteButton, EditButton, TaskRow } from './taskItemStyled';\nimport { ITaskItemProp } from '../../../../helper/Task.types';\n\n\n\nconst Item = styled(Paper)(({ theme }) => ({\n  backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\n  ...theme.typography.body2,\n  padding: theme.spacing(1),\n  textAlign: 'center',\n  color: theme.palette.text.secondary,\n}));\n\n\n\n\nexport const TaskItem: React.FC<ITaskItemProp>  = ({task, color}) => {\n  const { _id, text, date, subLevel } = task;\n  const [showModal, setShowModal] = useState(false);\n  const [modalContent, setModalContent] = useState<React.ReactNode | null>(null);\n\n  const formattedDate = formatToString(date);\n    \n  const openModal = () => {\n    setShowModal(true);\n  };\n  const closeModal = () => {\n    setShowModal(false);\n  };\n\n  const openSubTaskModal = () => {\n    setModalContent(\n      <AddSubTaskModal\n      _id = {_id} \n      subLevel ={subLevel} \n      onClose ={closeModal} />\n    );\n    openModal();\n  };\n\n  const openEditModal = () => {\n    setModalContent(\n      <EditTaskModal _id={_id} text={text} onClose={closeModal} />\n    );\n    openModal();\n  };\n\n  const openDeleteModal = () => {\n    setModalContent(\n      <DeleteConfirmationModal _id={_id} onClose={closeModal} />\n    );\n    openModal();\n  };\n\n\n\n  function CSSGrid() {\n    return (\n      <TaskRow >\n        <Box sx={{ width: 1 }} >\n          <Box display=\"grid\" gridTemplateColumns=\"repeat(13, 1fr)\" gap={1} >\n           \n\n            <Box gridColumn=\"span 6\">\n              <Item style={{ backgroundColor: `${color}`}}>{text}</Item>\n            </Box>\n            <Box gridColumn=\"span 3\">\n              <Item>{formattedDate}</Item>\n            </Box>\n            <Box gridColumn=\"span 2\">\n            <Item>\n                <AddSubTaskButton\n                 onClick={openSubTaskModal}>\n                  Add subtask\n                  </AddSubTaskButton>\n              </Item>\n            </Box>\n            <Box gridColumn=\"span 1\">\n              <Item>\n                <EditButton onClick={openEditModal}>Edit</EditButton>\n              </Item>\n            </Box>\n            <Box gridColumn=\"span 1\">\n              <Item>\n                <DeleteButton onClick={openDeleteModal}>\n                  <VscTrash style={{ height: '14px' }} />\n                </DeleteButton>\n              </Item>\n            </Box>\n          </Box>\n        </Box>\n        <Modal isOpen={showModal} onClose={closeModal}>\n          {modalContent}\n        </Modal>\n      </TaskRow>\n    );\n  }\n\n  return <CSSGrid />;\n};\n","import styled from 'styled-components';\nexport const TasksList = styled.ul`\n  display: flex;\n  flex-direction: column;\n\n  gap: ${p => p.theme.gap.norm};\n`;\n","// import { createSelector } from '@reduxjs/toolkit';\n\nimport { RootState } from \"../store\";\n\nexport const selectTask =( state: RootState )=> state.task.tasks;\n\n\n// export const selectFilter = state => state.filt.filter;\n\nexport const selectIsLoading =( state: RootState ) => state.task.isLoading;\n\nexport const selectError = ( state: RootState ) => state.task.error;\n\n// export const selectSearchedContacts = createSelector(\n//   [selectTask, selectFilter],\n//   (storeContacts, searchedContact) => {\n//     return storeContacts.filter(contact => {\n//       const fitContact = contact.name\n//         .toLowerCase()\n//         .includes(searchedContact.toLowerCase());\n//       return fitContact;\n//     });\n//   }\n// );\n","import { useSelector } from 'react-redux';\nimport { TaskItem } from '../taskItem/taskItem';\nimport { TasksList } from './taskListStyled';\nimport { selectTask } from '../../../../redux/tasks/selectors';\nimport { getColorForLevel, groupTasksByParentId, rootEl } from '../../../../helper/helper';\nimport { ITask } from '../../../../helper/Task.types';\nimport { FC } from 'react';\n\n// Рекурсивная функция для отображения задач и их подзадач\n\nconst renderTasks = (tasks:ITask[], taskMap:Record<string, ITask[]>, level = 0):JSX.Element => {\n  return (\n    <ul>\n      {tasks.map(task => (\n        <li key={task._id} style={{ paddingLeft: 20 }}>\n          <TaskItem task={task} color={getColorForLevel(level)} children/>\n          {taskMap[task._id] &&\n            renderTasks(taskMap[task._id], taskMap, level + 1)}\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport const TaskList:FC = () => {\n  const tasks = useSelector(selectTask);\n  const taskMap = groupTasksByParentId(tasks);\n\n  const topLevelTasks = taskMap[rootEl(tasks)|| \"\"] || [];\n\n  return <TasksList>{renderTasks(topLevelTasks, taskMap)}</TasksList>;\n};\n","import { TaskForm } from '../taskForm/taskForm';\n\nimport React, { FC, useState } from 'react';\nimport Box from '@mui/material/Box';\nimport Drawer from '@mui/material/Drawer';\nimport Button from '@mui/material/Button';\nimport Divider from '@mui/material/Divider';\n\n\n\nconst  TemporaryDrawer:FC =()=> {\n  const [open, setOpen] = useState<boolean>(false);\n\n  const toggleDrawer = (newOpen:boolean) => () => {\n    setOpen(newOpen);\n  };\n\n  return (\n    <div>\n      <Button variant=\"contained\" onClick={toggleDrawer(true)}>\n        Create Task\n      </Button>\n      <Drawer anchor=\"right\" open={open} onClose={toggleDrawer(false)}>\n        <Box sx={{ width: '50vw' }} role=\"presentation\">\n          <Box sx={{ p: 2 }}>\n            <h2\n              style={{\n                padding: 10,\n              }}\n            >\n              Add New Task\n            </h2>\n            <Divider />\n            <TaskForm onClose={toggleDrawer(false)} />\n          </Box>\n        </Box>\n      </Drawer>\n    </div>\n  );\n}\nexport default TemporaryDrawer\n\n","import styled from 'styled-components';\n\nexport const DrawlerBtn = styled.div`\n  padding: 100px;\n`;\n\nexport const Loader = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-height: 100vh;\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: 16px;\n  color: ${p => p.theme.colors.black};\n  max-width: 1000px;\n  margin: 0 auto;\n`;\n","import { GlobalStyle } from '../../globalStyles/GlobalStyle';\nimport { TaskList } from './Components/taskList/taskList';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectTask,\n  selectError,\n  selectIsLoading,\n} from '../../redux/tasks/selectors';\nimport { FC, useEffect } from 'react';\nimport { fetchTasks } from '../../redux/tasks/operators';\nimport { MagnifyingGlass } from 'react-loader-spinner';\n\nimport TemporaryDrawer from './Components/swipeableEdgeDrawer/SwipeableEdgeDrawer';\nimport { Container, DrawlerBtn, Loader } from './TaskPageStyled';\nimport { AppDispatch } from '../../redux/store';\nimport { Helmet } from 'react-helmet-async';\n\n const Tasks: FC = () => {\n  const allTasks = useSelector(selectTask);\n  const dispatch = useDispatch<AppDispatch>();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchTasks());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <Helmet>\n        <title>Your tasks</title>\n      </Helmet>\n      <DrawlerBtn style={{ padding: '40px' }}>\n        <TemporaryDrawer />\n      </DrawlerBtn>\n\n      {isLoading && !error && (\n        <Loader>\n          <MagnifyingGlass\n            visible={true}\n            height=\"120\"\n            width=\"120\"\n            ariaLabel=\"magnifying-glass-loading\"\n            wrapperStyle={{}}\n            wrapperClass=\"magnifying-glass-wrapper\"\n            glassColor=\"#3d9bba\"\n            color=\"#0f0d0d\"\n          />\n        </Loader>\n      )}\n\n      {allTasks.length > 0 ? (\n        <div>\n          <TaskList />\n        </div>\n      ) : (\n        <h2>Add Your first task</h2>\n      )}\n\n      <GlobalStyle />\n    </Container>\n  );\n};\nexport default Tasks;"],"names":["colorMap","getColorForLevel","level","getRandomChannelValue","Math","floor","random","r","g","b","concat","map","value","toString","padStart","join","getRandomHexColor","ModalButton","styled","_templateObject","_taggedTemplateLiteral","_templateObject2","_templateObject3","DeleteConfirmationModal","_ref","_id","onClose","dispatch","useDispatch","handleDelete","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","deleteTask","unwrap","fetchTasks","t0","console","error","stop","apply","arguments","_jsxs","children","_jsx","onClick","TextInput","_templateObject4","EditTaskModal","_templateObject5","initialText","text","_useState","useState","_useState2","_slicedToArray","setText","name","rows","onChange","e","target","placeholder","type","updateTask","FormStyled","Form","p","theme","colors","borderGray","borderRad","norm","padding","big","gap","FieldGroup","small","ErrorMessageStyled","ErrorMessage","FieldStyled","Field","Button","taskSchema","Yup","shape","required","TaskForm","parentId","subLevel","dispatchTask","Formik","initialValues","date","Date","validationSchema","onSubmit","values","actions","_subLevel","newTask","toISOString","addTask","resetForm","component","AddSubTaskModal","style","ModalOverlay","ModalContent","CloseButton","Modal","isOpen","useEffect","closeModalOnEsc","key","window","addEventListener","removeEventListener","currentTarget","MdClose","color","TaskRow","DeleteButton","EditButton","AddSubTaskButton","Item","Paper","_objectSpread","backgroundColor","palette","mode","typography","body2","spacing","textAlign","secondary","TaskItem","task","showModal","setShowModal","_useState3","_useState4","modalContent","setModalContent","formattedDate","actualDate","setMilliseconds","year","getFullYear","month","String","getMonth","day","getDate","hour","getHours","minute","getMinutes","second","getSeconds","formatToString","openModal","closeModal","openSubTaskModal","openEditModal","openDeleteModal","CSSGrid","Box","sx","width","display","gridTemplateColumns","gridColumn","VscTrash","height","TasksList","selectTask","state","tasks","selectIsLoading","isLoading","selectError","renderTasks","taskMap","length","undefined","paddingLeft","TaskList","useSelector","forEach","push","groupTasksByParentId","topLevelTasks","idArr","sort","a","localeCompare","rootEl","open","setOpen","toggleDrawer","newOpen","variant","Drawer","anchor","role","Divider","DrawlerBtn","Loader","Container","black","allTasks","Helmet","TemporaryDrawer","MagnifyingGlass","visible","ariaLabel","wrapperStyle","wrapperClass","glassColor","GlobalStyle"],"sourceRoot":""}